package multiiso

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"sync"
	"time"

	"github.com/nmelo/smartcard"
	"github.com/tarm/serial"
)

//Device struct
type Device struct {
	port    *serial.Port
	Ok      bool
	mux     sync.Mutex
	timeout time.Duration
	chRecv  chan []byte
	chQuit  chan int
	mode    int
}

//NewDevice create new serial device
func NewDevice(portName string, baudRate int, timeout time.Duration) (*Device, error) {
	log.Println("port serial config ...")
	config := &serial.Config{
		Name: portName,
		Baud: baudRate,
		//TODO if change, change funcerr
		ReadTimeout: 3 * time.Second,
	}
	// if timeout < 1*time.Second {
	// 	config.ReadTimeout = 1 * time.Second
	// } else {
	// 	config.ReadTimeout = timeout + 300*time.Millisecond
	// }
	s, err := serial.OpenPort(config)
	if err != nil {
		return nil, err
	}

	dev := &Device{
		port:    s,
		Ok:      true,
		timeout: timeout,
		// chQuit:  make(chan int),
	}
	chQuit := make(chan int)
	dev.chQuit = chQuit
	dev.read()
	log.Println("port serial Open!")
	return dev, nil
}

//Close close serial device
func (dev *Device) Close() bool {
	dev.Ok = false
	close(dev.chQuit)
	if err := dev.port.Close(); err != nil {
		log.Printf("close err: %s", err)
		return false
	}
	return true
}

//Read read serial device with a channel
func (dev *Device) read() {
	if !dev.Ok {
		// log.Printf("Device is closed === %s", dev)
		return
	}
	dev.chRecv = make(chan []byte)
	go func() {
		defer func() {
			select {
			case _, ok := <-dev.chRecv:
				if !ok {
					// log.Println("=== chRecv closed ===")
					return
				}
			default:
			}
			close(dev.chRecv)
			log.Println("finish read port")
		}()
		countError := 0
		//TODO timeoutRead?
		funcerr := func(err error) error {
			if err == nil {
				return nil
			}
			log.Printf("funcread err: %s", err)
			switch {
			case errors.Is(err, os.ErrClosed):
				dev.Ok = false
				return err
			case errors.Is(err, io.ErrClosedPipe):
				dev.Ok = false
				return err
			case errors.Is(err, io.EOF):
				if countError > 3 {
					dev.Ok = false
					return err
				}
				countError++
			}

			return nil

			// if countError > 3 {
			// dev.Ok = false
			// return err
			// }
			// time.Sleep(1 * time.Second)
			// countError++
			// return nil
		}
		bf := bufio.NewReader(dev.port)
		tempbuff := make([]byte, 0)
		buff := make([]byte, 256)
		for {
			if !dev.Ok {
				// log.Printf("Device is closed === %s  ######", dev)
				return
			}
			// log.Println("0")
			if dev.mode != 0 {
				line, _, err := bf.ReadLine()
				if err != nil {
					if err := funcerr(err); err != nil {
						return
					}
					continue
				}
				countError = 0
				select {
				case <-dev.chQuit:
					return
				case dev.chRecv <- line:
				case <-time.After(1 * time.Second):
				}
				continue
			}
			n, err := bf.Read(buff)
			if err != nil {
				if err := funcerr(err); err != nil {
					// log.Printf("0, err: %s", err)
					return
				}
				continue
			}
			switch {
			case len(tempbuff) <= 0 && buff[0] == '\x02' && buff[n-1] == '\x03' &&
				len(buff[0:n]) >= 6 && int(buff[2]) >= len(buff[0:n])-5:
				tempbuff = append(tempbuff, buff[0:n]...)
				select {
				case <-dev.chQuit:
					// log.Println("3")
					return
				case dev.chRecv <- tempbuff[:]:
					for {
						bf.ReadByte()
					}
				case <-time.After(1 * time.Second):
				}
				tempbuff = make([]byte, 0)
			case len(tempbuff) <= 0 && buff[0] == '\x02':
				tempbuff = append(tempbuff, buff[0:n]...)
			case len(tempbuff) > 0 && buff[n-1] != '\x03':
				tempbuff = append(tempbuff, buff[0:n]...)
			case len(tempbuff) > 2 && buff[n-1] == '\x03' && int(tempbuff[2]) >= len(tempbuff)-5:
				tempbuff = append(tempbuff, buff[0:n]...)
				select {
				case <-dev.chQuit:
					// log.Println("3")
					return
				case dev.chRecv <- tempbuff[:]:
				case <-time.After(1 * time.Second):
				}
				tempbuff = make([]byte, 0)
			default:
				tempbuff = make([]byte, 0)
			}

		}
	}()
	log.Println("reading port")
}

//Send write data bytes in serial device
func (dev *Device) Send(data []byte) (int, error) {
	dev.mux.Lock()
	defer dev.mux.Unlock()
	n, err := dev.port.Write(data)

	return n, err
}

//SendRecv write daa bytes in serial device and wait by response
func (dev *Device) SendRecv(data []byte) ([]byte, error) {
	dev.mux.Lock()
	defer dev.mux.Unlock()
	recv := make([]byte, 0)
	// log.Printf("data send: [% X]", data)
	if n, err := dev.port.Write(data); err != nil {
		return nil, err
	} else if n <= 0 {
		return nil, fmt.Errorf("dont write in SendRecv command, %w", smartcard.ErrComm)
	}
	// dev.port.Flush()
	select {
	case v, ok := <-dev.chRecv:
		if !ok {
			return nil, fmt.Errorf("close channel in dev")
		}
		if len(v) > 0 {
			recv = append(recv, v...)
		}
	case <-time.After(dev.timeout):
	}

	if recv == nil || len(recv) <= 0 {
		return nil, fmt.Errorf("timeout error in SendRecv command, %w", smartcard.ErrComm)
	}
	dev.port.Flush()
	return recv, nil
}

//Recv read data bytes in serial device
func (dev *Device) Recv() ([]byte, error) {
	var recv []byte
	select {
	case recv = <-dev.chRecv:
	case <-time.After(dev.timeout):
	}
	if recv == nil || len(recv) <= 0 {
		return nil, fmt.Errorf("timeout error in Recv command, %w", smartcard.ErrComm)
	}
	return recv[:], nil
}
